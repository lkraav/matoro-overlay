diff --git a/bin/opensearch-env b/bin/opensearch-env
index cd7a0b2b452..3e60f60263a 100644
--- a/bin/opensearch-env
+++ b/bin/opensearch-env
@@ -1,98 +1,110 @@
 #!/usr/bin/env bash
 
 set -e -o pipefail
 
 CDPATH=""
 
 SCRIPT="$0"
 
 UNAME=$(uname -s)
 if [ $UNAME = "FreeBSD" ]; then
   OS="freebsd"
 elif [ $UNAME = "Darwin" ]; then
   OS="darwin"
 else
   OS="other"
 fi
 
 # SCRIPT might be an arbitrarily deep series of symbolic links; loop until we
 # have the concrete path
 while [ -h "$SCRIPT" ] ; do
   ls=`ls -ld "$SCRIPT"`
   # Drop everything prior to ->
   link=`expr "$ls" : '.*-> \(.*\)$'`
   if expr "$link" : '/.*' > /dev/null; then
     SCRIPT="$link"
   else
     SCRIPT=`dirname "$SCRIPT"`/"$link"
   fi
 done
 
 if [[ -z "$OPENSEARCH_HOME" ]]; then
   # determine OpenSearch home; to do this, we strip from the path until we find
   # bin, and then strip bin (there is an assumption here that there is no nested
   # directory under bin also named bin)
   OPENSEARCH_HOME=`dirname "$SCRIPT"`
 
   # now make OPENSEARCH_HOME absolute
   OPENSEARCH_HOME=`cd "$OPENSEARCH_HOME"; pwd`
 
   while [ "`basename "$OPENSEARCH_HOME"`" != "bin" ]; do
     OPENSEARCH_HOME=`dirname "$OPENSEARCH_HOME"`
   done
   OPENSEARCH_HOME=`dirname "$OPENSEARCH_HOME"`
 fi
 
 # now set the classpath
 OPENSEARCH_CLASSPATH="$OPENSEARCH_HOME/lib/*"
 
+# Set our JVM in a Gentoo-specific manner
+if [ -z "$OPENSEARCH_JAVA_HOME" ]; then
+  GENTOO_VM=$(depend-java-query --get-vm virtual/jre:17)
+  if [ ! -z "$GENTOO_VM" ]; then
+    OPENSEARCH_JAVA_HOME=$(java-config-2 --select-vm=${GENTOO_VM} --jre-home)
+  else
+    echo "Unable to automatically detect a supported Java 17 VM. Opensearch is unlikely to launch."
+    echo "Please ensure that you have installed an appropriate Java VM using portage"
+    echo "OR pass the OPENSEARCH_JAVA_HOME environment variable."
+  fi
+fi
+
 # now set the path to java: OPENSEARCH_JAVA_HOME -> JAVA_HOME -> bundled JRE -> bundled JDK
 if [ ! -z "$OPENSEARCH_JAVA_HOME" ]; then
   JAVA="$OPENSEARCH_JAVA_HOME/bin/java"
   JAVA_TYPE="OPENSEARCH_JAVA_HOME"
 elif [ ! -z "$JAVA_HOME" ]; then
   JAVA="$JAVA_HOME/bin/java"
   JAVA_TYPE="JAVA_HOME"
 else
   if [ $OS = "darwin" ]; then
     # macOS bundled Java
     JAVA="$OPENSEARCH_HOME/jdk.app/Contents/Home/bin/java"
     JAVA_TYPE="bundled jdk"
   elif [ $OS = "freebsd" ]; then
     # using FreeBSD default java from ports if JAVA_HOME is not set
     JAVA="/usr/local/bin/java"
     JAVA_TYPE="bundled jdk"
   elif [ -d "$OPENSEARCH_HOME/jre" ]; then
     JAVA="$OPENSEARCH_HOME/jre/bin/java"
     JAVA_TYPE="bundled jre"
   else
     JAVA="$OPENSEARCH_HOME/jdk/bin/java"
     JAVA_TYPE="bundled jdk"
   fi
 fi
 
 if [ ! -x "$JAVA" ]; then
     echo "could not find java in $JAVA_TYPE at $JAVA" >&2
     exit 1
   fi
 
 # do not let JAVA_TOOL_OPTIONS slip in (as the JVM does by default)
 if [ ! -z "$JAVA_TOOL_OPTIONS" ]; then
   echo "warning: ignoring JAVA_TOOL_OPTIONS=$JAVA_TOOL_OPTIONS"
   unset JAVA_TOOL_OPTIONS
 fi
 
 # JAVA_OPTS is not a built-in JVM mechanism but some people think it is so we
 # warn them that we are not observing the value of $JAVA_OPTS
 if [ ! -z "$JAVA_OPTS" ]; then
   echo -n "warning: ignoring JAVA_OPTS=$JAVA_OPTS; "
   echo "pass JVM parameters via OPENSEARCH_JAVA_OPTS"
 fi
 
 if [[ "$("$JAVA" -version 2>/dev/null)" =~ "Unable to map CDS archive" ]]; then
   XSHARE="-Xshare:off"
 else
   XSHARE="-Xshare:auto"
 fi
 
 # check the Java version
